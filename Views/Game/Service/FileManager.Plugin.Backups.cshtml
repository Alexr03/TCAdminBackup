@using Kendo.Mvc.UI
@using TCAdminBackup.Controllers
@using TCAdminBackup.Models.Objects
@model Models.Game.FileManager.FileManagerModel

@{
    var accessibleSolutions = BackupController.AccessibleSolutions(Model.Service.ServiceId);
}

<script>

filemanagerNS.commands.BackupCommand = filemanagerNS.FileManagerCommand.extend({
    exec: function () {
        const that = this,
            filemanager = that.filemanager, // get the kendo.ui.FileManager instance
            options = that.options, // get the options passed through the tool
            target = options.target; // options.target is available only when command is executed from the context menu
        let selectedFiles = filemanager.getSelected(); // get the selected files
        
        $('<div id="backupDialog"></div>').kendoDialog({
          title: "Backup",
          open: function(){
                document.getElementById("backupTitle").innerHTML = "Backup " + selectedFiles[0].path + " to:";
          },
          close: function(){
                const dialog = $("#backupDialog").data("kendoDialog");
                dialog.destroy();  
          },
          content: `
            <h4 id="backupTitle">Backup</h4>
            @(Html.Kendo().DropDownList().Name("backupSolution")
                .Items(i =>
                {
                    foreach (var solution in accessibleSolutions)
                    {
                        i.Add().Text(solution.ToString()).Value(accessibleSolutions.IndexOf(solution).ToString());
                    }
                })
                .OptionLabel("Select where to backup to.")
                .SelectedIndex(0)
                .Enable(true)
                .ToClientTemplate())
          `,
          visible: false,
          actions: [
                {text: "Cancel"},
                {text: "Backup", primary: true, action: BackupFile, cssClass: "k-button-ok"},
          ]
        }).data("kendoDialog").open();
    }
});

function BackupsPrompt() {
    return $('<div id="backups"></div>').kendoDialog({
        width: "400px",
        buttonLayout: "normal",
        title: "Backups",
        closable: true,
        visible: false,
        modal: true,
        collapsible: true,
        open: OnBackupsPromptOpen,
        close: OnBackupsPromptClose,
        content: `
                <h4>Storage Capacity</h4>
                <div id="storageProgress" style="width: 100%;" />
                <div id="backupTabStrip">
                    <ul>
                        @if (accessibleSolutions.Contains(BackupType.S3))
                        {
                            <li>
                                @BackupType.S3.ToString()
                            </li>
                        }
                        @if (accessibleSolutions.Contains(BackupType.Ftp))
                        {
                            <li>
                                @BackupType.Ftp.ToString()
                            </li>
                        }
                        @if (accessibleSolutions.Contains(BackupType.Local))
                        {
                            <li>
                                @BackupType.Local.ToString()
                            </li>
                        }
                    </ul>
                    @if (accessibleSolutions.Contains(BackupType.S3))
                    {
                        <div>
                            <div>
                                <h2>S3 Public Storage</h2>
                                <h4>Select a backup:</h4>
                                <input id="s3BackupsList" style="width: 100%;" />
                            </div>
                        </div>
                    }
                    @if (accessibleSolutions.Contains(BackupType.Ftp))
                    {
                        <div>
                            <div>
                                <h2>File Transfer Protocol</h2>
                                <h4>Select a backup:</h4>
                                <input id="ftpBackupsList" style="width: 100%;" />
                            </div>
                        </div>
                    }
                    @if (accessibleSolutions.Contains(BackupType.Local))
                    {
                        <div>
                            <div>
                                <h2>Local Storage</h2>
                                <h4>Select a backup:</h4>
                                <input id="localBackupsList" style="width: 100%;" />
                            </div>
                        </div>
                    }
                </div>
                `,
        actions: [
            { text: 'Cancel' },
            { text: 'Delete', action:DeleteBackup },
            { text: 'Download', action:DownloadBackup },
            { text: 'Restore', primary: true, action:RestoreBackup }
        ]
    }).data("kendoDialog").open().result;
}

function BackupFile(){
    const fileManager = $("#filemanager").getKendoFileManager();
    let selectedFiles = fileManager.getSelected();
    kendo.ui.progress($(".k-filemanager-listview, .k-filemanager-grid"), true);
    
    $.ajax({
        type: "POST",
        url: "/Backup/BackupFile/@(Model.Service.ServiceId)",
        data: JSON.stringify({ "file": selectedFiles[0].path, "backupType": $("#backupSolution").data("kendoDropDownList").text() }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        error: function (e) {
            kendo.ui.progress($(".k-filemanager-listview, .k-filemanager-grid"), false);
            OnError(e);
        },
        success: function (e) {
            fileManager.refresh();
            kendo.ui.progress($(".k-filemanager-listview, .k-filemanager-grid"), false);
            OnSuccess(e);
        }
    });
}

function DownloadBackup(){
    const backups = selectedBackupList();
    const backupId = backups.value();
    window.location = '/Backup/Download/@(Model.Service.ServiceId)?backupId=' + backupId;
    
    return false;
}

function DeleteBackup(){
    const fileManager = $("#filemanager").getKendoFileManager();
    const backups = selectedBackupList();
    const backupId = backups.value();
    showTabStripLoading();

    $.ajax({
        type: "POST",
        url: "/Backup/Delete/@(Model.Service.ServiceId)",
        data: JSON.stringify({ "backupId": backupId}),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        error: function (e) {
            hideTabStripLoading();
            OnError(e);
        },
        success: function (e) {
            fileManager.refresh();
            backups.dataSource.read();
            OnSuccess(e);
            hideTabStripLoading();
        }
    });
    
    return false;
}

function RestoreBackup(){
    const fileManager = $("#filemanager").getKendoFileManager();
    const backups = selectedBackupList();
    const backupId = backups.value();
    if (backupId == "") { return false; }
    kendo.ui.progress($(".k-filemanager-listview, .k-filemanager-grid"), true);

    $.ajax({
        type: "POST",
        url: "/Backup/Restore/@(Model.Service.ServiceId)",
        data: JSON.stringify({ target: fileManager.path(), "backupId": backupId }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        error: function (e) {
            kendo.ui.progress($(".k-filemanager-listview, .k-filemanager-grid"), false);
            OnError(e);
        },
        success: function (e) {
            fileManager.refresh();
            kendo.ui.progress($(".k-filemanager-listview, .k-filemanager-grid"), false);
            OnSuccess(e);
        }
    });
}

function OnBackupsPromptOpen(){
    //Tabstrip
    const tabStrip = $("#backupTabStrip").kendoTabStrip({
        select: function(e){
            showTabStripLoading();
        },
        contentLoaded: hideTabStripLoading,
        activate: hideTabStripLoading,
        show: function(e){
            UpdateCapacity();
        },
        animation:  {
            open: {
                effects: "fadeIn"
            }
        }
    }).data("kendoTabStrip");
    
    tabStrip.select(0);
    
    @if (accessibleSolutions.Contains(BackupType.S3))
    {
        <text>           
            //S3 Backup List
            $("#s3BackupsList").kendoDropDownList({
                dataTextField: "name",
                dataValueField: "value",
                index: 0,
                filter: "contains",
                noDataTemplate: 'Cannot find any backups for @(Model.Service.NameNoHtml)',
                dataSource: {
                    transport: {
                        read: {
                            dataType: "json",
                            url: "/Backup/List/@(Model.Service.ServiceId)",
                            data: { "backupType": 0 },
                            cache: false
                        }
                    }
                }
            });
            </text>
        }
        
        @if (accessibleSolutions.Contains(BackupType.Ftp))
        {
            <text>
                //FTP Backup List
                $("#ftpBackupsList").kendoDropDownList({
                    dataTextField: "name",
                    dataValueField: "value",
                    index: 0,
                    filter: "contains",
                    noDataTemplate: 'Cannot find any backups for @(Model.Service.NameNoHtml)',
                    dataSource: {
                        transport: {
                            read: {
                                dataType: "json",
                                url: "/Backup/List/@(Model.Service.ServiceId)",
                                data: { "backupType": 1 },
                                cache: false
                            }
                        }
                    }
                });
            </text>
        }
        
        @if (accessibleSolutions.Contains(BackupType.Local))
        {
            <text>
                //Local Backup List
                $("#localBackupsList").kendoDropDownList({
                    dataTextField: "name",
                    dataValueField: "value",
                    index: 0,
                    filter: "contains",
                    noDataTemplate: 'Cannot find any backups for @(Model.Service.NameNoHtml)',
                    dataSource: {
                        transport: {
                            read: {
                                dataType: "json",
                                url: "/Backup/List/@(Model.Service.ServiceId)",
                                data: { "backupType": 2 },
                                cache: false
                            }
                        }
                    }
                });
            </text>
        }
        hideTabStripLoading();
}

function OnBackupsPromptClose(){
    const dialog = $("#backups").data("kendoDialog");
    dialog.destroy();
}

function UpdateCapacity(){
    const selectedBackup = selectedBackupSolution();
    if(selectedBackup == null){
        return;
    }
        
    showTabStripLoading();
    // Storage Capacity
    $.ajax({
        type: "GET",
        url: "/Backup/Capacity/@(Model.Service.ServiceId)?backupType=" + selectedBackup,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        error: function (e) {
            OnError(e);
        },
        success: function (e) {
            const progressBar = $("#storageProgress").kendoProgressBar({
                min: 0,
                max: e.limit,
                value: e.value,
                type: "value",
                showStatus: true,
                animation: {
                    duration: 400
                }
            }).data("kendoProgressBar");
            
            progressBar.progressStatus.text(humanFileSize(e.value) + "/" + humanFileSize(e.limit));
        }
    });
}

function selectedBackupSolution(){
    const backupSolution = $("#backupTabStrip").data("kendoTabStrip").select().text().trim();
    return backupSolution.toUpperCase();
}

function selectedBackupList(){
    const backupSolution = selectedBackupSolution();    
    return $("#" + backupSolution.toLowerCase() + "BackupsList").data("kendoDropDownList")
}

function OnSuccess(e) {
    if(e.Message){
        TCAdmin.Ajax.ShowBasicDialog("Success", e.Message);
    }

    filemanager = $("#filemanager").getKendoFileManager();
    filemanager.refresh();
}

function showTabStripLoading(){
    const tabStrip = $("#backupTabStrip").getKendoTabStrip();
    kendo.ui.progress(tabStrip.element, true);
}

function hideTabStripLoading(){
    const tabStrip = $("#backupTabStrip").getKendoTabStrip();
    kendo.ui.progress(tabStrip.element, false);
}

function humanFileSize(bytes, si=false, dp=1) {
  const thresh = si ? 1000 : 1024;

  if (Math.abs(bytes) < thresh) {
    return bytes + ' B';
  }

  const units = si 
    ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] 
    : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
  let u = -1;
  const r = 10**dp;

  do {
    bytes /= thresh;
    ++u;
  } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);

  return bytes.toFixed(dp) + ' ' + units[u];
}

</script>